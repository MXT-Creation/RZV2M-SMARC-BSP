--- ./include/linux/uio_driver.h.org	2022-07-04 14:48:52.363055360 +0900
+++ ./include/linux/uio_driver.h	2022-07-04 14:49:18.505514333 +0900
@@ -42,6 +42,7 @@
 	int			memtype;
 	void __iomem		*internal_addr;
 	struct uio_map		*map;
+	int                     cache_attr;
 };
 
 #define MAX_UIO_MAPS	5
--- ./drivers/uio/uio.c.org	2022-07-04 14:42:10.335208826 +0900
+++ ./drivers/uio/uio.c	2022-07-04 14:43:43.165537708 +0900
@@ -738,8 +738,14 @@
 		return -EINVAL;
 
 	vma->vm_ops = &uio_physical_vm_ops;
-	if (idev->info->mem[mi].memtype == UIO_MEM_PHYS)
-		vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+	if (idev->info->mem[mi].memtype == UIO_MEM_PHYS) {
+		if (mem->cache_attr == 1) {
+			vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
+		} else if (mem->cache_attr == 2) {
+			vma->vm_page_prot = pgprot_dmacoherent(vma->vm_page_prot);
+		} else if (mem->cache_attr == 0)
+			vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+        }
 
 	/*
 	 * We cannot use the vm_iomap_memory() helper here,
--- ./drivers/uio/uio_pdrv_genirq.c.org	2022-07-04 14:42:20.978554969 +0900
+++ ./drivers/uio/uio_pdrv_genirq.c	2022-07-04 14:48:09.977559806 +0900
@@ -33,6 +33,7 @@
 	spinlock_t lock;
 	unsigned long flags;
 	struct platform_device *pdev;
+        unsigned int ipino;
 };
 
 /* Bits in uio_pdrv_genirq_platdata.flags */
@@ -40,6 +41,15 @@
 	UIO_IRQ_DISABLED = 0,
 };
 
+static struct uio_info* ipi_uio_info[16];
+int set_ipi_handler(int ipinr, void *handler, char *desc);
+void clear_ipi_handler(int ipinr);
+
+static void ipi_handler(int ipinr)
+{
+	uio_event_notify(ipi_uio_info[ipinr]);
+}
+
 static int uio_pdrv_genirq_open(struct uio_info *info, struct inode *inode)
 {
 	struct uio_pdrv_genirq_platdata *priv = info->priv;
@@ -103,8 +113,12 @@
 static void uio_pdrv_genirq_cleanup(void *data)
 {
 	struct device *dev = data;
-
-	pm_runtime_disable(dev);
+	struct uio_info *uioinfo = dev_get_platdata(dev);
+ 
+ 	pm_runtime_disable(dev);
+	if (((struct uio_pdrv_genirq_platdata *)uioinfo->priv)->ipino) {
+	        clear_ipi_handler(((struct uio_pdrv_genirq_platdata *)uioinfo->priv)->ipino);
+	}
 }
 
 static int uio_pdrv_genirq_probe(struct platform_device *pdev)
@@ -114,6 +128,7 @@
 	struct uio_pdrv_genirq_platdata *priv;
 	struct uio_mem *uiomem;
 	int ret = -EINVAL;
+	const void *of_prop;
 	int i;
 
 	if (node) {
@@ -170,6 +185,14 @@
 			dev_err(&pdev->dev, "failed to get IRQ\n");
 			return ret;
 		}
+
+		of_prop = of_get_property(pdev->dev.of_node, "ipi", NULL);
+		if (of_prop) {
+			uioinfo->irq = UIO_IRQ_CUSTOM;
+			priv->ipino = be32_to_cpup(of_prop);
+			ipi_uio_info[priv->ipino] = priv->uioinfo;
+			set_ipi_handler(priv->ipino, ipi_handler, "Kick From uC3");
+		}
 	}
 
 	if (uioinfo->irq) {
@@ -204,6 +227,13 @@
 			break;
 		}
 
+		of_prop = of_get_property(pdev->dev.of_node, "cache_attr", NULL);
+		if (of_prop) {
+			uiomem->cache_attr = be32_to_cpup(of_prop);
+		} else {
+			uiomem->cache_attr = 0;
+		}
+
 		uiomem->memtype = UIO_MEM_PHYS;
 		uiomem->addr = r->start & PAGE_MASK;
 		uiomem->offs = r->start & ~PAGE_MASK;
